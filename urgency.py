# -*- coding: utf-8 -*-
"""URGENCY

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ijTTz-cPiDZFdhmfZYOacQbZ3730_R5L

# ***URGENCY PREDICTION***
"""

import numpy as np
import pickle
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# 100 sample records: [age, condition] --> condition: 0 = normal, 1 = critical
X = np.random.randint(18, 80, size=(100, 1))  # Ages
condition_flags = np.random.randint(0, 2, size=(100, 1))  # 0 or 1 for stable/critical
X_full = np.hstack((X, condition_flags))  # Combine features
y = condition_flags.ravel()  # Labels: same as condition

X_train, X_test, y_train, y_test = train_test_split(X_full, y, test_size=0.2, random_state=42)

model = LogisticRegression()
model.fit(X_train, y_train)

# Check accuracy
y_pred = model.predict(X_test)
print(f"Model Accuracy: {accuracy_score(y_test, y_pred):.2f}")

with open("urgency_model.pkl", "wb") as f:
    pickle.dump(model, f)
print("Model saved as urgency_model.pkl")

# Load the model
with open("urgency_model.pkl", "rb") as f:
    loaded_model = pickle.load(f)

# User input
try:
    age = int(input("Enter your age: "))
    condition_input = input("Is your condition critical? (yes/no): ").strip().lower()

    if condition_input not in ["yes", "no"]:
        raise ValueError("Invalid condition input")

    condition = 1 if condition_input == "yes" else 0

    # Prediction
    input_data = np.array([[age, condition]])
    prediction = loaded_model.predict(input_data)

    # Output
    if prediction[0] == 1:
        print("🚨 Your condition is predicted as CRITICAL.")
    else:
        print("✅ Your condition is predicted as NORMAL.")

except Exception as e:
    print(f"Error: {e}")



"""# ***FAKE DONAR DETECTION***"""

# train_model.py
import pandas as pd
import numpy as np
import pickle
from sklearn.ensemble import IsolationForest
from hashlib import sha256

# Generate dummy data
def hash_id(x):
    return sha256(x.encode()).hexdigest()

np.random.seed(42)

data = {
    'id': [f"ID{i}" for i in range(90)] + ["DUPLICATE"] * 10,
    'contact': [f"9{np.random.randint(100000000, 999999999)}" for _ in range(90)] + ["12345"] * 10,
    'age': np.random.choice(list(range(18, 80)) + [150, 200], size=100),
    'condition': np.random.choice([0, 1], size=100),
}

df = pd.DataFrame(data)

# Feature engineering
df['id_hash'] = df['id'].apply(lambda x: hash_id(x))
df['duplicate_id'] = df.duplicated('id_hash').astype(int)
df['invalid_contact'] = df['contact'].apply(lambda x: 1 if len(x) != 10 or not x.isdigit() else 0)
df['implausible_age'] = df['age'].apply(lambda x: 1 if x < 18 or x > 100 else 0)
df['age_condition_mismatch'] = df.apply(lambda row: 1 if row['age'] < 25 and row['condition'] == 1 else 0, axis=1)

features = df[['duplicate_id', 'invalid_contact', 'implausible_age', 'age_condition_mismatch']]

# Train model
model = IsolationForest(contamination=0.1, random_state=42)
model.fit(features)

# Save model
pickle.dump(model, open("fraud_model.pkl", "wb"))
print("✅ Fraud model trained and saved.")

# predict_user.py
import numpy as np
import pickle
from hashlib import sha256

# Load model
with open("fraud_model.pkl", "rb") as f:
    model = pickle.load(f)

def hash_id(x):
    return sha256(x.encode()).hexdigest()

try:
    user_id = input("Enter Unique Donor ID: ").strip()
    contact = input("Enter contact number: ").strip()
    age = int(input("Enter your age: "))
    condition = int(input("Do you have any major health conditions? (1 = Yes, 0 = No): "))

    # Derived Features
    hashed_id = hash_id(user_id)
    duplicate_id = 1 if hashed_id == hash_id("DUPLICATE") else 0
    invalid_contact = 1 if len(contact) != 10 or not contact.isdigit() else 0
    implausible_age = 1 if age < 18 or age > 100 else 0
    age_condition_mismatch = 1 if age < 25 and condition == 1 else 0

    input_features = np.array([[duplicate_id, invalid_contact, implausible_age, age_condition_mismatch]])
    prediction = model.predict(input_features)

    if prediction[0] == -1:
        print("🚨 Suspicious donor detected. Please verify the donor's details.")
    else:
        print("✅ Donor entry is valid.")

except Exception as e:
    print(f"❌ Error: {e}")

